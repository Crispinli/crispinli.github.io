<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>简历模板</title>
    <link href="/%E7%AE%80%E5%8E%86%E6%A8%A1%E6%9D%BF/"/>
    <url>/%E7%AE%80%E5%8E%86%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[ <center>     <h1>XXX</h1> </center><h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h2><ul><li>性 别：男&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;年 龄：25  </li><li>手 机：134XXXX3216 &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;  邮 箱：XXXXX@XXX.com    </li><li>专 业：计算机科学与计算 &emsp;&emsp;&emsp;&emsp;&emsp; 岗 位：研发工程师</li></ul><h2 id="工作及教育经历"><a href="#工作及教育经历" class="headerlink" title="工作及教育经历"></a>工作及教育经历</h2><ul><li>前公司&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;2019.8~至今&emsp;&emsp;&emsp;&emsp;&emsp; 事业群名字-部门名字       </li><li>XXXX大学&emsp;&emsp;&emsp;&emsp;&emsp;2017.9~2019.7&emsp;&emsp;&emsp;&emsp; 计算机科学与技术专业-研究生         </li><li>XXXX大学&emsp;&emsp;&emsp;&emsp;&emsp;2013.9~2017.7&emsp;&emsp;&emsp;&emsp; 计算机科学与技术专业-本科  </li></ul><h2 id="专业技能"><a href="#专业技能" class="headerlink" title="专业技能"></a>专业技能</h2><ul><li>熟练使用 C++，掌握Go，了解 Java、Python、PHP 等编程语言</li><li>掌握基础数据结构和算法的基本原理</li><li>等等</li></ul><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><ol><li><p>公司/学校 - XXweb服务器 - 独立开发 - 201508- 201512 </p><ul><li>具体功能 </li><li>运用了那些技术，技术难点是</li><li>效果如何</li><li>demo演示地址，github地址 </li></ul></li><li><p>公司/学校 - XX游戏 - 负责后端开发 - 201309- 201401 </p><ul><li>具体功能 </li><li>运用了那些技术，技术难点是</li><li>效果如何</li><li>demo演示地址，github地址 </li></ul></li></ol><h2 id="获奖经历"><a href="#获奖经历" class="headerlink" title="获奖经历"></a>获奖经历</h2><ul><li>XXX 优秀新人</li><li>XXX 学生社团优秀干部</li><li>竞赛 XXX 奖</li></ul><h2 id="个人账号"><a href="#个人账号" class="headerlink" title="个人账号"></a>个人账号</h2><ul><li>blog 地址 (附加自己博客特色，写了哪些技术文章)</li><li>github 地址 (附加自己github特色，突出的项目)</li></ul><h2 id="其他信息"><a href="#其他信息" class="headerlink" title="其他信息"></a>其他信息</h2><ul><li>喜欢钻研技术 等等</li><li>性格开朗，喜欢跳舞，做过主持人 等等 </li></ul>]]></content>
    
    
    <categories>
      
      <category>其他文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>简历模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是Maven</title>
    <link href="/%E4%BB%80%E4%B9%88%E6%98%AFMaven/"/>
    <url>/%E4%BB%80%E4%B9%88%E6%98%AFMaven/</url>
    
    <content type="html"><![CDATA[<h2 id="一、maven的定义"><a href="#一、maven的定义" class="headerlink" title="一、maven的定义"></a>一、maven的定义</h2><h3 id="1-maven的定义"><a href="#1-maven的定义" class="headerlink" title="1. maven的定义"></a>1. maven的定义</h3><p>maven是基于项目对象模型(POM project object model)，可以通过一小段描述信息（配置）来管理项目的构建，报告和文档的软件项目管理工具。</p><p>maven的核心功能便是合理叙述项目间的依赖关系，通俗点讲，就是通过pom.xml文件的配置获取jar包，而不用手动去添加jar包。</p><p>如果需要使用pom.xml来获取jar包，那么首先该项目就必须为maven项目。maven项目可以这样去想，就是在java项目和web项目的上面包裹了一层maven，本质上java项目还是java项目，web项目还是web项目，但是包裹了maven之后，就可以使用maven提供的一些功能了，如通过pom.xml添加jar包等。</p><p>根据上一段的描述，我们最终的目的就是学会如何在pom.xml中配置获取到我们想要的jar包，在此之前我们就必须了解如何创建maven项目、maven项目的结构是怎样的、与普通java和web项目的区别在哪里，还有如何配置pom.xml获取到对应的jar包等等。</p><h3 id="2-初识pom-xml"><a href="#2-初识pom-xml" class="headerlink" title="2. 初识pom.xml"></a>2. 初识pom.xml</h3><p>pom.xml获取junit的jar包的编写。</p><p><img src="https://pic2.zhimg.com/80/v2-ee38cf60efa4fc67947d24b13130aee9_1440w.jpg" alt="img"></p><p>为什么通过groupId、artifactId、version三个属性就能定位一个jar包？</p><p>假如上面的pom.xml文件属于A项目，那么A项目肯定是一个maven项目，通过上面这三个属性能够找到junit对应版本的jar包。因此junit项目肯定也是一个maven项目，该项目中的pom.xml文件就会有三个标识符，比如像下图这样，然后别的maven项目就能通过这三个属性来找到junit项目的jar包了。所以，在创建每个maven项目时都要求写上这三个属性的值。</p><p><img src="https://pic2.zhimg.com/80/v2-0e01ddac42b851447e9941a3b7e5de45_1440w.png" alt="img"></p><h2 id="二、maven的安装"><a href="#二、maven的安装" class="headerlink" title="二、maven的安装"></a>二、maven的安装</h2><p>安装maven之前需要安装jdk并且配置环境变量，之后再安装maven并且配置环境变量。</p><h3 id="1-安装jdk"><a href="#1-安装jdk" class="headerlink" title="1. 安装jdk"></a>1. 安装jdk</h3><div class="table-container"><table><thead><tr><th>操作系统</th><th>教程</th></tr></thead><tbody><tr><td>Windows</td><td><a href="https://juejin.cn/post/6844903937095499789">https://juejin.cn/post/6844903937095499789</a></td></tr><tr><td>Mac</td><td><a href="https://www.jianshu.com/p/194531d106ae">https://www.jianshu.com/p/194531d106ae</a></td></tr></tbody></table></div><h3 id="2-安装maven"><a href="#2-安装maven" class="headerlink" title="2. 安装maven"></a>2. 安装maven</h3><div class="table-container"><table><thead><tr><th>操作系统</th><th>教程</th></tr></thead><tbody><tr><td>Windows</td><td><a href="https://www.cnblogs.com/liuhongfeng/p/5057827.html">https://www.cnblogs.com/liuhongfeng/p/5057827.html</a></td></tr><tr><td>Mac</td><td><a href="https://www.jianshu.com/p/eea8ebd227b1">https://www.jianshu.com/p/eea8ebd227b1</a></td></tr></tbody></table></div><h2 id="三、仓库的概念"><a href="#三、仓库的概念" class="headerlink" title="三、仓库的概念"></a>三、仓库的概念</h2><p>通过pom.xml中的配置，就能够获取到想要的jar包，但是这些jar是在哪里呢？答案就是仓库。</p><p>仓库分为：本地仓库、第三方仓库(私服)、中央仓库。</p><h3 id="1-本地仓库"><a href="#1-本地仓库" class="headerlink" title="1. 本地仓库"></a>1. 本地仓库</h3><p>Maven会将工程中依赖的构件(Jar包)从远程下载到本机一个目录下管理，每个电脑默认的仓库是在 <code>user.home/.m2/repository</code>下。</p><p>一般我们会重新创建一个文件夹作为本地仓库，从网上下载一个拥有相对完整的所有jar包的结合，都丢到本地仓库中，然后每次写项目时就可以直接从本地仓库里获取。</p><p>在$MAVEN_HOME/conf/setting.xml文件中修改本地库位置</p><p><img src="https://pic4.zhimg.com/80/v2-2f4ab5e2eaa40270a20853be5dfed523_1440w.png" alt="img"></p><h3 id="2-第三方仓库"><a href="#2-第三方仓库" class="headerlink" title="2. 第三方仓库"></a>2. 第三方仓库</h3><p>第三方仓库，又称为内部中心仓库，也称为私服。</p><p>一般是由公司自己设立的，只为本公司内部共享使用。它既可以作为公司内部构件协作和存档，也可作为公用类库镜像缓存，减少在外部访问和下载的频率（使用私服为了减少对中央仓库的访问）。</p><p>私服可以使用的是局域网，中央仓库必须使用外网</p><p>注意：连接私服，需要单独配置。如果没有配置私服，默认不使用。</p><h3 id="3-中央仓库"><a href="#3-中央仓库" class="headerlink" title="3. 中央仓库"></a>3. 中央仓库</h3><p>maven内置了远程公用仓库：<a href="https://link.zhihu.com/?target=http%3A//repo1.maven.org/maven2">http://repo1.maven.org/maven2</a>。这个公共仓库是由Maven自己维护，里面有大量的常用类库，并包含了世界上大部分流行的开源项目构件。</p><p>工程依赖的jar包如果本地仓库没有，默认从中央仓库下载。</p><h3 id="4-jar包的获取流程"><a href="#4-jar包的获取流程" class="headerlink" title="4. jar包的获取流程"></a>4. jar包的获取流程</h3><p><img src="https://pic2.zhimg.com/80/v2-70ebd8e519ade66cfaf23c610e0c927d_1440w.jpg" alt="img"></p><h2 id="四、使用命令行管理maven项目"><a href="#四、使用命令行管理maven项目" class="headerlink" title="四、使用命令行管理maven项目"></a>四、使用命令行管理maven项目</h2><h3 id="1-创建maven-java项目"><a href="#1-创建maven-java项目" class="headerlink" title="1. 创建maven java项目"></a>1. 创建maven java项目</h3><p>在合适的目录中执行以下命令（需要联网），即可创建java项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn archetype:generate -DgroupId=com.wuhao.maven.quickstart -DartifactId=simple -DarchetypeArtifactId=maven-archetype-quickstart<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mvn：核心命令</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">archetype:generate：创建项目</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-DgroupId=com.wuhao.maven.quickstart：指定groupId</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-DartifactId=simple：指定artifactId</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-DarchetypeArtifactId=maven-archetype-quickstart：表示创建的是[maven]java项目</span><br></code></pre></td></tr></table></figure><p>命令行完毕后，可以看到如下信息</p><p><img src="https://pic1.zhimg.com/80/v2-a4d4980db8d6e38eee6c5fa91cde24fc_1440w.jpg" alt="img"></p><h3 id="2-maven-java项目结构"><a href="#2-maven-java项目结构" class="headerlink" title="2. maven java项目结构"></a>2. maven java项目结构</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">pom.xml核心配置<br>src<span class="hljs-regexp">/main/</span>javajava源码<br>src<span class="hljs-regexp">/main/</span>resourcesjava配置<br>src<span class="hljs-regexp">/test/</span>java测试代码<br>src<span class="hljs-regexp">/test/</span>resource测试配置目录<br>target输出目录<br></code></pre></td></tr></table></figure><h3 id="3-创建-maven-web-项目"><a href="#3-创建-maven-web-项目" class="headerlink" title="3. 创建 maven web 项目"></a>3. 创建 maven web 项目</h3><p>在合适的目录中执行以下命令（需要联网），即可创建web项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn archetype:generate -DgroupId=com.wuhao.maven.quickstart -DartifactId=myWebApp -DarchetypeArtifactId=maven-archetype-webapp -Dversion=0.0.1-snapshot<br></code></pre></td></tr></table></figure><p>与创建java项目有两点不同，1）-DarchetypeArtifactId=maven-archetype-webapp ；2）多了 -Dversion=0.01-snapshot， 在创建java项目的时候也可以加上这个，如果不写，会默认帮我们加上1.0-snapshot。</p><h3 id="4-maven-webb项目结构"><a href="#4-maven-webb项目结构" class="headerlink" title="4. maven webb项目结构"></a>4. maven webb项目结构</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">pom.xml核心配置<br>src<span class="hljs-regexp">/main/</span>javajava源码<br>src<span class="hljs-regexp">/main/</span>resourcesjava配置<br>src<span class="hljs-regexp">/main/</span>webappWebRoot目录<br>　|-- WEB-INF<br>　 |-- web.xml<br>src/test测试<br>target输出目录<br></code></pre></td></tr></table></figure><h3 id="5-使用命令操作maven项目"><a href="#5-使用命令操作maven项目" class="headerlink" title="5. 使用命令操作maven项目"></a>5. 使用命令操作maven项目</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle">mvn <span class="hljs-keyword">compile</span>--　编译：src<span class="hljs-regexp">/main/</span>java目录java源码编译生成<span class="hljs-keyword">class</span>文件 （target目录下）<br>mvn test--　测试：src<span class="hljs-regexp">/test/</span>java 目录java源码编译生成<span class="hljs-keyword">class</span>文件 （target目录下）<br>mvn clean--　清理：删除target目录，也就是将<span class="hljs-keyword">class</span>文件等删除<br>mvn <span class="hljs-keyword">package</span>--　打包：生成压缩文件：java项目#jar包；web项目#war包 （target目录下）<br>mvn install--　安装：将压缩文件(jar或者war)上传到本地仓库<br>mvn deploy--  部署/安装：将压缩文件上传私服<br></code></pre></td></tr></table></figure><h3 id="6-maven项目生命周期"><a href="#6-maven项目生命周期" class="headerlink" title="6. maven项目生命周期"></a>6. maven项目生命周期</h3><p>当执行生命周期后面命令时，<strong>前面步骤的命令自动执行</strong>。</p><p><img src="https://pic3.zhimg.com/80/v2-70e6f9b22f565689b82df81439ca9b6a_1440w.jpg" alt="img"></p><p>红色标记字体的意思就是当我们直接使用mvn install命令对项目进行上传至本地仓库时，那么前面所有的步骤将会自动执行，比如源代码的编译，打包等等。</p><h2 id="五、pom-xml配置文件详解"><a href="#五、pom-xml配置文件详解" class="headerlink" title="五、pom.xml配置文件详解"></a>五、pom.xml配置文件详解</h2><p>pom包含的对象是使用maven来构建的，<strong>pom.xml文件包含了项目的各种配置信息</strong>。 创建一个POM之前，应该要先决定项目组(groupId)、项目名(artifactId)、版本（version），因为这些属性在项目仓库是唯一标识的。需要特别注意，每个项目都只有一个pom.xml文件。</p><h3 id="1-pom节点分布"><a href="#1-pom节点分布" class="headerlink" title="1. pom节点分布"></a>1. pom节点分布</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 基本配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 依赖配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 构建配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">reporting</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">reporting</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 项目信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">inceptionYear</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">inceptionYear</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">licenses</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">licenses</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">organization</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">organization</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">developers</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">developers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contributors</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">contributors</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 环境设置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">issueManagement</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">issueManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ciManagement</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">ciManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mailingLists</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">mailingLists</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scm</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">scm</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">prerequisites</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">prerequisites</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepositories</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-各节点解释说明"><a href="#2-各节点解释说明" class="headerlink" title="2. 各节点解释说明"></a>2. 各节点解释说明</h3><h4 id="2-1-基本配置信息"><a href="#2-1-基本配置信息" class="headerlink" title="2.1 基本配置信息"></a>2.1 基本配置信息</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- pom模型版本，maven2和3只能为4.0.0--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 项目的组ID，用于maven定位--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.company.bank<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 项目ID，通常是项目的名称,唯一标识符--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 项目的版本--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 项目的打包方式--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>节点</th><th>解释说明</th></tr></thead><tbody><tr><td>modelVersion</td><td>pom模型版本，maven2和3只能为4.0.0</td></tr><tr><td>groupId</td><td>这是项目组的编号，这在组织或项目中通常是独一无二的。 例如，一家银行集团com.company.bank拥有所有银行相关项目。</td></tr><tr><td>artifactId</td><td>这是项目的ID。这通常是项目的名称。 例如，consumer-banking。 除了groupId之外，artifactId还定义了artifact在存储库中的位置。</td></tr><tr><td>version</td><td>这是项目的版本。与groupId一起使用，artifact在存储库中用于将版本彼此分离。 例如：com.company.bank:consumer-banking:1.0，com.company.bank:consumer-banking:1.1</td></tr><tr><td>packaging</td><td>项目打包方式，有以下值：pom, jar, maven-plugin, ejb, war, ear, rar, par</td></tr></tbody></table></div><h4 id="2-2-依赖配置"><a href="#2-2-依赖配置" class="headerlink" title="2.2 依赖配置"></a>2.2 依赖配置</h4><h5 id="2-2-1-dependencies"><a href="#2-2-1-dependencies" class="headerlink" title="2.2.1 dependencies"></a>2.2.1 dependencies</h5><p>项目相关依赖配置，如果在父项目写的依赖，会被子项目引用。一般会在父项目中定义子项目中所有共用的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2-2-parent"><a href="#2-2-2-parent" class="headerlink" title="2.2.2 parent"></a>2.2.2 parent</h5><p>用于确定父项目的坐标位置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.learnPro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SIP-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2-3-modules"><a href="#2-2-3-modules" class="headerlink" title="2.2.3 modules"></a>2.2.3 modules</h5><p>有些maven项目会做成多模块的，这个标签用于指定当前项目所包含的所有模块。<strong>之后对这个项目进行的maven操作，会让所有子模块也进行相同操作。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>com-a<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>com-b<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>com-c<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2-4-properties"><a href="#2-2-4-properties" class="headerlink" title="2.2.4 properties"></a>2.2.4 properties</h5><p>用于定义pom常量。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2-5-dependencyManagement"><a href="#2-2-5-dependencyManagement" class="headerlink" title="2.2.5 dependencyManagement"></a>2.2.5 dependencyManagement</h5><p>配置写法同dependencies。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    .....<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在父模块中定义后，子模块不会直接使用对应依赖，但是在使用相同依赖的时候可以不加版本号。这样父项目就统一了版本，而且子项目可以在需要的时候才引用对应的依赖。</p><h4 id="3-构建配置"><a href="#3-构建配置" class="headerlink" title="3. 构建配置"></a>3. 构建配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">sourceDirectory</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">scriptSourceDirectory</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">testSourceDirectory</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--被编译过的应用程序class文件存放的目录。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--被编译过的测试class文件存放的目录。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">testOutputDirectory</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--使用来自该项目的一系列构建扩展--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--描述使用到的构建扩展。--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">extension</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--构建扩展的groupId--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--构建扩展的artifactId--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--构建扩展的版本--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">extension</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">extensions</span>&gt;</span>    <br>  <span class="hljs-comment">&lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">defaultGoal</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--这个元素描述了项目相关或测试相关的所有资源路径--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。举个例 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--描述存放资源的目录，该路径相对POM路径--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--包含的模式列表，例如**/*.xml.--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--排除的模式列表，例如**/*.xml--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>    <br>  <span class="hljs-comment">&lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">testResources</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">testResource</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">testResource</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">testResources</span>&gt;</span>    <br>  <span class="hljs-comment">&lt;!--构建产生的所有文件存放的目录--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--当filtering开关打开时，使用到的过滤器属性文件列表--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">filters</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--使用的插件列表 。--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--plugin元素包含描述插件所需要的信息。--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--插件在仓库里的group ID--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span>    <br>     <span class="hljs-comment">&lt;!--插件在仓库里的artifact ID--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span>    <br>     <span class="hljs-comment">&lt;!--被使用的插件的版本（或版本范围）--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span>    <br>     <span class="hljs-comment">&lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span>/&gt;</span>    <br>     <span class="hljs-comment">&lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span>    <br>      <span class="hljs-comment">&lt;!--execution元素包含了插件执行需要的信息--&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span>    <br>       <span class="hljs-comment">&lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标--&gt;</span>    <br>       <span class="hljs-tag">&lt;<span class="hljs-name">id</span>/&gt;</span>    <br>       <span class="hljs-comment">&lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段--&gt;</span>    <br>       <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>/&gt;</span>    <br>       <span class="hljs-comment">&lt;!--配置的执行目标--&gt;</span>    <br>       <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>/&gt;</span>    <br>       <span class="hljs-comment">&lt;!--配置是否被传播到子POM--&gt;</span>    <br>       <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span>    <br>       <span class="hljs-comment">&lt;!--作为DOM对象的配置--&gt;</span>    <br>       <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span>    <br>      <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span>    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--项目引入插件所需要的额外依赖--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <br>      <span class="hljs-comment">&lt;!--参见dependencies/dependency元素--&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <br>       ......    <br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>         <br>     <span class="hljs-comment">&lt;!--任何配置是否被传播到子项目--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span>    <br>     <span class="hljs-comment">&lt;!--作为DOM对象的配置--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span>    <br>  <span class="hljs-comment">&lt;!--使用的插件列表--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--参见build/pluginManagement/plugins/plugin元素--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">extensions</span>/&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">phase</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span>    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--参见dependencies/dependency元素--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <br>      ......    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>知识拓展</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>朴素贝叶斯分类器</title>
    <link href="/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8/"/>
    <url>/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>Naive Bayes Classification<br>被称作“Naive”的原因：整个形式化过程中只做最原始、最简单的假设。</p><ol><li><p>朴素贝叶斯</p><ul><li><p>优点：<strong>在数据较少时仍然有效，可以处理多分类问题</strong></p></li><li><p>缺点：对于输入数据的构成形式较为敏感</p></li><li><p>适用数据类型：标称型数据</p><blockquote><ol><li>标称型数据：目标变量只在有限目标集中取值，标称型目标变量主要用于分类</li><li>数值型数据：目标变量从无限的数值集合中取值，数值型目标变量主要用于回归分析</li></ol></blockquote></li></ul></li><li><p>贝叶斯决策理论</p><ul><li><strong>核心思想</strong>：选择高概率对应的类别作为样本的类别</li></ul></li><li><p>概率与条件概率</p><ul><li><strong>条件概率公式</strong>：$P(B|A)=\frac{p(AB)}{P(A)}$</li><li>依据条件概率公式，可得<strong>贝叶斯概率公式</strong>：$P(B|A)=\frac{P(A|B)P(B)}{P(A)}$</li></ul></li><li><p>使用条件概率进行分类</p><ul><li>需要比较的是$p(c_1|x,y)$和$p(c_2|x,y)$，应用贝叶斯概率公式可得$p(c_i|x,y)=\frac{p(x,y|c_i)p(c_i)}{p(x,y)}$</li><li><strong>选择使该概率值最大的类别作为样本的类别</strong></li></ul></li><li><p>朴素贝叶斯分类器</p><p><strong>假设：样本中每个特征之间相互独立</strong></p><p>依据假设，可得：$p(x,y|c_i)=p(x|c_i)p(y|c_i)$</p><p>从而：$p(x,y|c_i)p(c_i)=p(x|c_i)p(y|c_i)p(c_i)$</p><p>根据每个类别对应概率值的大小来确定样本所属的概率，所以为了简化计算，只比较上式即可</p></li><li><p>联合概率与全概率公式</p><ul><li><p>完备事件组：如果$A_1\cup A_2\cup ···\cup A_n=\Omega$，且$A_i\cap A_j=\Phi$成立，其中$1\leq i\neq j \leq n$，则称$A_1,A_2,···,A_n$为完备事件组</p><p><img src="完备事件组.png" alt="完备事件组"></p></li><li><p><strong>先验概率</strong>：通过简单统计分析可以获得的概率，例如$P(A_i)$</p></li><li><p><strong>条件概率</strong>：在事件$A_i$发生的前提下，事件$B$发生的概率，表示为$P(B|A_i)$</p></li><li><p><strong>联合概率</strong>：事件$A_i$和事件$B$同时发生的概率，表示为$P(B,A_i)$，依据条件概率公式有：$P(B,A_i)=P(B|A_i)P(A_i)$</p><p><img src="联合概率.png" alt="联合概率"></p></li><li><p>由上图及联合概率公式，可以引申出<strong>全概率公式</strong>：$P(B)=\sum_{i=1}^nP(B,A_i)=\sum_{i=1}^nP(B|A_i)P(A_i)$，这个式子也称为事件$B$的全概率公式</p></li></ul></li><li><p>贝叶斯概率公式</p><ul><li><p>依据全概率公式，<strong>贝叶斯概率公式可改写为</strong>：$P(A_i|B)=\frac{P(B,A_i)}{P(B)}=\frac{P(B|A_i)P(A_i)}{P(B)}=\frac{P(B|A_i)P(A_i)}{\sum_{i=1}^nP(B,A_i)}=\frac{P(B|A_i)P(A_i)}{\sum_{i=1}^nP(B|A_i)P(A_i)}$</p></li><li><p>朴素贝叶斯算法的先天缺陷：其他属性携带的信息被训练集中某个分类下未出现的属性值“抹去”，使得预测概率为0.</p><p>针对这个缺陷，提出了<strong>拉普拉斯平滑方法</strong>：对先验概率的分子加1，分母加上类别数；对条件概率的分子加1，分母加上对应特征的特征值数量。这样解决了缺陷的同时，也保证了概率值相加之和为1。<br>$<br>p(c)=\frac{|D_c|}{|D|}\rightarrow p(c)=\frac{|D_c|+1}{|D|+N}<br>$</p><p>$<br>p(x_i|c)=\frac{|D_{x_i|c}|}{|D_c|}\rightarrow p(x_i|c)=\frac{|D_{x_i|c}|+1}{|D_c|+N_i}<br>$</p></li></ul></li><li><p>连续型属性的概率计算</p><p>当某个特征为离散型，先验概率和条件概率都可以通过计算对应的比例获得。</p><p>然而，实际应用中的某个特征可能为连续型，所以应当如何处理连续性特征呢？</p><ul><li><p><strong>通过划分区间的方式离散化</strong></p><p>这种离散化的方法难以把握划分区间长度。如果划分区间太小，划分后的区间数量就会很多，每一个区间的记录数量很少，可能导致对条件概率误差不可靠；如果划分区间长度太长，就导致部分信息丢失，而且不同类别的记录也有很大可能划分到同一区间，导致分类不准确。</p></li><li><p><strong>通过概率密度函数计算概率</strong></p><p>这种方法首先假设该连续型特征的取值服从某种概率分布，然后利用训练数据进行参数估计以获得分布函数，最后通过概率密度函数计算概率。</p><p>通常情况下，假设数据是服从高斯分布的，即$P(x_i|c)～N(\mu_{c,i},\sigma_{c,i}^2)$，其中$\mu_{c,i}$和$\sigma_{c,i}^2$分别是$c$类样本在第$i$属性上的均值和方差，从而有：<br>$<br>P(x_i|c)=\frac{1}{\sqrt{2\pi}\sigma_{c,i}}e^{-\frac{(x-\mu_{c,i})^2}{2\sigma_{c,i}^2}}<br>$</p></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
